{"version":3,"sources":["components/Person.js","components/PersonsList.js","containers/App.js","Actions/Actions.js","Constants/Constants.js","serviceWorker.js","Reducers/Reducers.js","index.js"],"names":["Person","firstName","lastName","img","email","city","cell","className","alt","src","PersonsList","personsArray","Fragment","map","user","key","login","uuid","name","first","last","picture","large","location","App","this","props","onSearchPersons","persons","Component","connect","state","isPending","error","dispatch","type","fetch","then","response","json","data","payload","results","catch","Boolean","window","hostname","match","initialState","logger","createLogger","store","createStore","action","newState","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TAmBeA,EAhBA,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,UAAUC,EAAiC,EAAjCA,SAASC,EAAwB,EAAxBA,IAAIC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,KAAKC,EAAS,EAATA,KAClD,OACQ,yBAAKC,UAAW,mDACX,yBAAKA,UAAU,MAAMC,IAAI,SAAQC,IAAKN,IACzC,6BACC,wBAAII,UAAU,OAAON,EAArB,IAAiCC,GACjC,wBAAIK,UAAU,OAAd,QAA0BF,GAC1B,oCAAUD,GACV,oCAAUE,MCePI,G,MAtBK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACrB,OACO,kBAAC,IAAMC,SAAP,KACC,yBAAKL,UAAU,kBAEXI,EAAaE,IAAI,SAAAC,GACjB,OAAO,kBAAC,EAAD,CAAQC,IAAMD,EAAKE,MAAMC,KACpBhB,UAAWa,EAAKI,KAAKC,MACrBjB,SAAYY,EAAKI,KAAKE,KACtBjB,IAAMW,EAAKO,QAAQC,MACnBlB,MAAOU,EAAKV,MACZE,KAAMQ,EAAKR,KACXD,KAAMS,EAAKS,SAASlB,a,eCIvCmB,E,4LAGDC,KAAKC,MAAMC,oB,+BAId,OACE,6BACE,wBAAIpB,UAAU,MAAd,iBAEC,kBAAC,EAAD,CAAcI,aAAcc,KAAKC,MAAME,e,GAX5BC,aAkBHC,cAhCO,SAACC,GACrB,MAAM,CACJH,QAAQG,EAAMH,QACdI,UAAUD,EAAMC,UAChBC,MAAMF,EAAME,QAIU,SAAAC,GACxB,MAAM,CACJP,gBAAgB,kBAAIO,ECVY,SAACA,GACjCA,EAAS,CAACC,KCNwB,4BDOlCC,MAAM,iDACLC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SACxBF,KAAK,SAAAG,GAAI,OAAEN,EAAS,CAACC,KCRY,0BDQkBM,QAAQD,EAAKE,YAChEC,MAAM,SAAAV,GAAK,OAAEC,EAAS,CAACC,KCRS,yBDQmBM,QAAQR,WD2BjDH,CAA4CN,GG1BvCoB,QACW,cAA7BC,OAAOtB,SAASuB,UAEe,UAA7BD,OAAOtB,SAASuB,UAEhBD,OAAOtB,SAASuB,SAASC,MACvB,2D,4kBCXN,IAAMC,EAAe,CACpBpB,QAAQ,GACRI,WAAU,EACVC,MAAM,I,gBCEDgB,EAASC,yBACTC,EAAOC,YDCgB,WAAkC,IAAjCrB,EAAgC,uDAA1BiB,EAAcK,EAAY,uDAAL,GAClDC,EAAQ,KAAOvB,GAClB,OAAOsB,EAAOlB,MACb,IFhBiC,0BEiBjC,YACImB,EADJ,CAECtB,WAAU,IAEX,IFpBiC,0BEqBjC,YACIsB,EADJ,CAEC1B,QAAQyB,EAAOZ,QACfT,WAAU,IAEX,IFzBgC,yBE0BhC,YACIsB,EADJ,CAECrB,MAAMoB,EAAOZ,QACbT,WAAU,IAEV,QACA,OAAOsB,ICtB0BC,YAAgBC,IAAgBP,IAGvEQ,IAASC,OAAO,kBAAC,IAAD,CAAUP,MAAOA,GAAO,kBAAC,EAAD,OAAoBQ,SAASC,eAAe,SFiH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.2ce4ce6b.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Person = ({firstName,lastName,img,email,city,cell}) =>{\n\treturn(\n         <div className= 'tc bg-light-green br3 pa3 ma2 grow bw2 shadow-5'>\n              <img className='br3' alt='person'src={img}/>\n           <div>\n            <h2 className=\"ttu\">{firstName} {lastName}</h2>\n            <h3 className=\"ttc\">City:{city}</h3>\n            <p>Email:{email}</p>\n            <p>Phone:{cell}</p>\n            </div>\n          </div>\n\n\t\t)\n}\n\n\nexport default Person;","import React from 'react';\nimport Person from './Person';\nimport './PersonsList.css';\n\nconst PersonsList = ({personsArray}) =>{  \n\treturn(\n        <React.Fragment>\n         <div className='grid-container'>\n           {\n             personsArray.map(user=>{\n             return <Person key ={user.login.uuid}\n                         firstName={user.name.first}\n                         lastName = {user.name.last}\n                         img= {user.picture.large}\n                         email={user.email}\n                         cell={user.cell}\n                         city={user.location.city}\n                     />\n            })\n           }\n          </div>\n       </React.Fragment>\n\t\t)\n}\n\n\nexport default PersonsList;","import React ,{Component}from 'react';\nimport PersonsList from '../components/PersonsList';\nimport './App.css';\nimport {connect} from 'react-redux';\nimport { searchPersons} from '../Actions/Actions';\n\nconst mapStateToProps=(state)=>{\n  return{\n    persons:state.persons,\n    isPending:state.isPending,\n    error:state.error\n}\n}\n\nconst mapDispatchToProps= dispatch =>{\n  return{\n    onSearchPersons:()=>dispatch(searchPersons())\n  }\n}\n\nclass App extends Component {\n    \n    componentDidMount(){\n     this.props.onSearchPersons()\n\n    }\n render(){\n  return (\n    <div >\n      <h1 className='tc'>Personal List</h1>\n\n       <PersonsList  personsArray={this.props.persons}/>\n      \n     \n    </div>\n  );\n}\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n\n","import {REQUEST_PERSONS_PENDING,\n\tREQUEST_PERSONS_SUCCESS,\n\tREQUEST_PERSONS_FAILED}\n   from'../Constants/Constants';\n\n\n   export const searchPersons = ()=>(dispatch)=>{\n   \tdispatch({type:REQUEST_PERSONS_PENDING})\n   \tfetch('https://randomuser.me/api/?&nat=gb&results=20')\n    .then(response=>response.json())\n    .then(data=>dispatch({type:REQUEST_PERSONS_SUCCESS, payload:data.results}))\n    .catch(error=>dispatch({type:REQUEST_PERSONS_FAILED,payload:error}))\n   }","\nexport const REQUEST_PERSONS_PENDING =\"REQUEST_PERSONS_PENDING\";\nexport const REQUEST_PERSONS_SUCCESS =\"REQUEST_PERSONS_SUCCESS\";\nexport const REQUEST_PERSONS_FAILED =\"REQUEST_PERSONS_FAILED\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport {\n\tREQUEST_PERSONS_PENDING,\n\tREQUEST_PERSONS_SUCCESS,\n\tREQUEST_PERSONS_FAILED\n}from'../Constants/Constants';\n\nconst initialState = {\n\tpersons:[],\n\tisPending:false,\n\terror:''\n}\n\n\nexport const searchPersons = (state=initialState, action={})=>{\n\tconst newState = {...state}\n    switch(action.type){\n    \tcase REQUEST_PERSONS_PENDING:\n    \treturn{\n    \t\t...newState,\n    \t\tisPending:true\n    \t}\n    \tcase REQUEST_PERSONS_SUCCESS:\n    \treturn{\n    \t\t...newState,\n    \t\tpersons:action.payload,\n    \t\tisPending:false\n    \t}\n    \tcase REQUEST_PERSONS_FAILED:\n    \treturn{\n    \t\t...newState,\n    \t\terror:action.payload,\n    \t\tisPending:false\n    \t}\n      default:\n      return newState;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport { searchPersons} from './Reducers/Reducers';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst store= createStore(searchPersons,applyMiddleware(thunkMiddleware,logger));\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}